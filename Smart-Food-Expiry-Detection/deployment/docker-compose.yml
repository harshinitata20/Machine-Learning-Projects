version: '3.8'

services:
  # FastAPI Backend
  api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: development
    ports:
      - "8000:8000"
    volumes:
      - ../:/app
      - uploads_data:/app/uploads
      - results_data:/app/results
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=sqlite:///./data/food_expiry.db
      - UPLOAD_DIR=/app/uploads
      - RESULTS_DIR=/app/results
    networks:
      - food_expiry_network
    depends_on:
      - db
    restart: unless-stopped

  # Streamlit Frontend
  frontend:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: development
    ports:
      - "8501:8501"
    volumes:
      - ../:/app
    environment:
      - PYTHONPATH=/app
      - API_BASE_URL=http://api:8000
    command: ["streamlit", "run", "frontend/app.py", "--server.address", "0.0.0.0", "--server.port", "8501"]
    networks:
      - food_expiry_network
    depends_on:
      - api
    restart: unless-stopped

  # Database (PostgreSQL for production, SQLite for development)
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: food_expiry_db
      POSTGRES_USER: food_expiry_user
      POSTGRES_PASSWORD: food_expiry_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../deployment/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - food_expiry_network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - food_expiry_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../deployment/nginx.conf:/etc/nginx/nginx.conf
      - ../deployment/ssl:/etc/nginx/ssl
    networks:
      - food_expiry_network
    depends_on:
      - api
      - frontend
    restart: unless-stopped

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ../deployment/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - food_expiry_network
    restart: unless-stopped

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../deployment/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - food_expiry_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  uploads_data:
  results_data:
  prometheus_data:
  grafana_data:

networks:
  food_expiry_network:
    driver: bridge